package boids.events


import boids.environment.BoidPos
import boids.utils.Vector2d
import java.util.ArrayList
import boids.environment.ObsPos
import java.util.UUID

event Launch

/* Setup the Area.
 */
event CreateArea

/* Carry all setup informations, send by the GUI.
 */
event SetupSettings {
	val boids0Quantity : int
	val boids1Quantity : int
	val boids2Quantity : int
	val boids3Quantity : int
	val maxH : double
	val maxW : double

	new(bq0 : int, bq1 : int, bq2 : int, bq3 : int, mW : double, mH : double) {
		boids0Quantity = bq0
		boids1Quantity = bq1
		boids2Quantity = bq2
		boids3Quantity = bq3
		maxH = mH
		maxW = mW
	}

}

/* Freeze signal send by the GUI.
 */
event Freeze {
	val value : boolean

	new (value : boolean) {
		this.value = value
	}

}
/* Freeze signal send by the GUI.
 */
event Pause {
	val value : boolean

	new (value : boolean) {
		this.value = value
	}

}

event StopBoid{
	val id : UUID
	
	new (i : UUID){
		id=i
	}
}

event Perception {
			/* 
		 * contains the boid himself and all obstacles in range
		 */
	val own : BoidPos
	val id : UUID
	val others : ArrayList<BoidPos>
	val obstacles : ArrayList<ObsPos>
	
	new (id : UUID, own : BoidPos) {
		this.others = new ArrayList
		this.obstacles = new ArrayList
		this.own = own
		this.id = id
	}
}

event BoidRequest {
	val group : int
	val pos : Vector2d
	
	new(g:int, p:Vector2d){
		group = g
		pos = p
	}
}

event DestructRequest {
	val pos : Vector2d

	new(p : Vector2d) {
		pos = p
	}
}

event ObstacleRequest {
	val p1 : Vector2d
	val p2 : Vector2d
	
	new (p1 : Vector2d, p2:Vector2d){
		this.p1=p1
		this.p2=p2
	}
}

event BoidCreate {
	val group : int
	val pos : Vector2d

	new(g : int, p : Vector2d) {
		group = g
		pos = p
	}
}

event ObstacleCreate {
	val p1 : Vector2d
	val p2 : Vector2d

	new (p1 : Vector2d, p2 : Vector2d) {
		this.p1 = p1
		this.p2 = p2
	}
}

event Destruct {
	val pos : Vector2d

	new(p : Vector2d) {
		pos = p
	}
}

event Intent {
	val influence : Vector2d
	
	new (influence : Vector2d){
		this.influence=influence
	}
}